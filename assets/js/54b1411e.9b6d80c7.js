(self.webpackChunkdart_code_metrics_website=self.webpackChunkdart_code_metrics_website||[]).push([[5685],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,c(c({ref:t},u),{},{components:n})):r.createElement(f,c({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,c=new Array(i);c[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var l=2;l<i;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8285:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),c=["components"],a={},s="Source lines of Code",l={unversionedId:"metrics/source-lines-of-code",id:"metrics/source-lines-of-code",isDocsHomePage:!1,title:"Source lines of Code",description:"Source lines of Code is an approximate number of source code lines in a function or method. Blank or comment lines are not counted.",source:"@site/docs/metrics/source-lines-of-code.md",sourceDirName:"metrics",slug:"/metrics/source-lines-of-code",permalink:"/docs/metrics/source-lines-of-code",editUrl:"https://github.com/dart-code-checker/website/blob/main/docs/metrics/source-lines-of-code.md",version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Number of Parameters",permalink:"/docs/metrics/number-of-parameters"},next:{title:"Weight Of a Class",permalink:"/docs/metrics/weight-of-class"}},u=[{value:"Used for",id:"used-for",children:[]},{value:"Config example",id:"config-example",children:[]},{value:"Example",id:"example",children:[]}],p={toc:u};function m(e){var t=e.components,n=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"source-lines-of-code"},"Source lines of Code"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Source lines of Code")," is an approximate number of source code lines in a function or method. Blank or comment lines are not counted."),(0,i.kt)("p",null,"This metric is used to measure the size of a computer program by counting the number of lines in the text of the program's source code. ",(0,i.kt)("strong",{parentName:"p"},"SLOC")," is typically used to predict the amount of effort that will be required to develop a program, as well as to estimate programming productivity or maintainability once the software is produced."),(0,i.kt)("h2",{id:"used-for"},"Used for"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/anti-patterns/long-method"},"Long Method"))),(0,i.kt)("h2",{id:"config-example"},"Config example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"dart_code_metrics:\n  ...\n  metrics:\n    ...\n    - source-lines-of-code: 50\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"MetricComputationResult<int> computeImplementation(\n  Declaration node,\n  Iterable<ScopedClassDeclaration> classDeclarations,\n  Iterable<ScopedFunctionDeclaration> functionDeclarations,\n  InternalResolvedUnitResult source,\n) {\n  final visitor = SourceCodeVisitor(source.lineInfo);\n  node.visitChildren(visitor);\n\n  return MetricComputationResult(\n    value: visitor.linesWithCode.length,\n    context: _context(node, visitor.linesWithCode, source),\n  );\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Source lines of Code")," for the example function is ",(0,i.kt)("strong",{parentName:"p"},"6"),"."))}m.isMDXComponent=!0}}]);