(self.webpackChunkdart_code_metrics_website=self.webpackChunkdart_code_metrics_website||[]).push([[2139],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return l},kt:function(){return m}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=t.createContext({}),c=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},l=function(e){var n=c(e.components);return t.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=o,v=p["".concat(u,".").concat(m)]||p[m]||d[m]||a;return r?t.createElement(v,i(i({ref:n},l),{},{components:r})):t.createElement(v,i({ref:n},l))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6825:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return l},default:function(){return p}});var t=r(2122),o=r(9756),a=(r(7294),r(3905)),i=["components"],s={},u="Avoid unused parameters",c={unversionedId:"rules/common/avoid-unused-parameters",id:"rules/common/avoid-unused-parameters",isDocsHomePage:!1,title:"Avoid unused parameters",description:"Rule id",source:"@site/docs/rules/common/avoid-unused-parameters.md",sourceDirName:"rules/common",slug:"/rules/common/avoid-unused-parameters",permalink:"/docs/rules/common/avoid-unused-parameters",editUrl:"https://github.com/dart-code-checker/website/blob/main/docs/rules/common/avoid-unused-parameters.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Avoid non null assertion",permalink:"/docs/rules/common/avoid-non-null-assertion"},next:{title:"Binary expression operand order",permalink:"/docs/rules/common/binary-expression-operand-order"}},l=[{value:"Rule id",id:"rule-id",children:[]},{value:"Severity",id:"severity",children:[]},{value:"Description",id:"description",children:[{value:"Example",id:"example",children:[]}]}],d={toc:l};function p(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"avoid-unused-parameters"},"Avoid unused parameters"),(0,a.kt)("h2",{id:"rule-id"},"Rule id"),(0,a.kt)("p",null,"avoid-unused-parameters"),(0,a.kt)("h2",{id:"severity"},"Severity"),(0,a.kt)("p",null,"Warning"),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"Checks for unused parameters inside a function or method body.\nFor overridden methods suggests renaming unused parameters to ","_",", ","_","_",", etc."),(0,a.kt)("p",null,"Note: abstract classes are completely ignored by the rule to avoid redundant checks for potentially overridden methods."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"Bad:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"void someFunction(String s) { // LINT\n  return;\n}\n\nclass SomeClass {\n  void method(String s) { // LINT\n    return;\n  }\n}\n\nclass SomeClass extends AnotherClass {\n  @override\n  void method(String s) {} // LINT\n}\n")),(0,a.kt)("p",null,"Good:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"void someOtherFunction() {\n  return;\n}\n\nclass SomeOtherClass {\n  void method() {\n    return;\n  }\n}\n\nvoid someOtherFunction(String s) {\n  print(s);\n  return;\n}\n\nclass SomeOtherClass {\n  void method(String s) {\n    print(s);\n    return;\n  }\n}\n\nclass SomeOtherClass extends AnotherClass {\n  @override\n  void method(String _) {}\n}\n\nabstract class SomeOtherClass {\n  void method(String s);\n}\n")))}p.isMDXComponent=!0}}]);