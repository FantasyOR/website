(self.webpackChunkdart_code_metrics_website=self.webpackChunkdart_code_metrics_website||[]).push([[191],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,f=u["".concat(l,".").concat(d)]||u[d]||p[d]||o;return n?r.createElement(f,a(a({ref:t},m),{},{components:n})):r.createElement(f,a({ref:t},m))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1268:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return m},default:function(){return u}});var r=n(2122),i=n(9756),o=(n(7294),n(3905)),a=["components"],s={},l="Maximum Nesting",c={unversionedId:"metrics/maximum-nesting-level",id:"metrics/maximum-nesting-level",isDocsHomePage:!1,title:"Maximum Nesting",description:"Maximum Nesting Level this is the maximum level of nesting blocks / control structures that are present in a method (or function). Code with deep nesting level are often complex and tough to maintain.",source:"@site/docs/metrics/maximum-nesting-level.md",sourceDirName:"metrics",slug:"/metrics/maximum-nesting-level",permalink:"/docs/metrics/maximum-nesting-level",editUrl:"https://github.com/dart-code-checker/website/blob/main/docs/metrics/maximum-nesting-level.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Lines of Code",permalink:"/docs/metrics/lines-of-code"},next:{title:"Number of Methods",permalink:"/docs/metrics/number-of-methods"}},m=[{value:"Config example",id:"config-example",children:[]},{value:"Example",id:"example",children:[]}],p={toc:m};function u(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"maximum-nesting"},"Maximum Nesting"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Maximum Nesting Level")," this is the maximum level of nesting blocks / control structures that are present in a method (or ",(0,o.kt)("em",{parentName:"p"},"function"),"). Code with deep nesting level are often complex and tough to maintain."),(0,o.kt)("p",null,"Generally the blocks with ",(0,o.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"else"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"else if"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"do"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"for"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"switch"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"catch"),", etc statements are the part of nested loops."),(0,o.kt)("h2",{id:"config-example"},"Config example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"dart_code_metrics:\n  ...\n  metrics:\n    ...\n    - maximum-nesting-level: 5\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"void visitBlock(Block node) {\n  final nestingNodesChain = <AstNode>[];\n\n  AstNode astNode = node;\n  do {\n    if (astNode is Block &&\n        (astNode?.parent is! BlockFunctionBody ||\n            astNode?.parent?.parent is FunctionExpression ||\n            astNode?.parent?.parent is ConstructorDeclaration)) {\n      nestingNodesChain.add(astNode);\n    }\n\n    astNode = astNode.parent;\n  } while (astNode.parent != _functionNode);\n\n  if (nestingNodesChain.length > _deepestNestingNodesChain.length) {\n    _deepestNestingNodesChain = nestingNodesChain;\n  }\n\n  super.visitBlock(node);\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Maximum Nesting Level")," for the example function is ",(0,o.kt)("strong",{parentName:"p"},"3"),"."))}u.isMDXComponent=!0}}]);